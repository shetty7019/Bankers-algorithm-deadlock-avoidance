//C program to simulate Bankers algorithm for the purpose of deadlock avoidance.

#include<stdio.h>

int main(){
    int n,r,i,k,j;
    printf("Number of processes ");
    scanf("%d",&n);
    printf("\nNumber of resources ");
    scanf("%d",&r);
    int alloc[n][r],max[n][r],avail[r];
    printf("\nALLOCATION MATRIX: ");
    for(i=0;i<n;i++){
        for(j=0;j<r;j++)
        scanf("%d",&alloc[i][j]);
    }
    printf("\nMaximum MATRIX: ");
    for(i=0;i<n;i++){
        for(j=0;j<r;j++)
        scanf("%d",&max[i][j]);
    }
    printf("\n Available: ");
    for(i=0;i<r;i++)
    scanf("%d",&avail[i]);
    int f[n],ans[n],ind=0;
    for(k=0;k<n;k++){
      f[k]=0;
    }
    int need[n][r];
    for(i=0;i<n;i++){
        for(j=0;j<r;j++)
        need[i][j]=max[i][j]-alloc[i][j];
    }
    for(k=0;k<n;k++){
        for(i=0;i<n;i++){
            if(f[i]==0){
                int flag=0;
                for(j=0;j<r;j++){
                    if(need[i][j]>avail[j]){
                        flag=1;
                        break;
                    }
                }
                if(flag==0){
                    ans[ind++]=i;
                    for(int y=0;y<r;y++)
                        avail[y]+=alloc[i][y];
                    f[i]=1;
                }
            }
        }
    }
    printf("\nThe SAFE sequence is:\n");
    for(i=0;i<n;i++){
        printf("p[%d]->",ans[i]);
    }
    
     return 0;   
}
